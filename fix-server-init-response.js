const fs = require('fs');
const path = require('path');

console.log('๐ง === ุฅุตูุงุญ ุงุณุชุฌุงุจุฉ ุงูุณูุฑูุฑ ูุฑุณุงุฆู init ===');

// ูุฑุงุกุฉ ููู ุงูุณูุฑูุฑ
const serverPath = path.join(__dirname, 'server.js');
let serverContent = fs.readFileSync(serverPath, 'utf8');

console.log('๐ ูุฑุงุกุฉ ููู server.js...');

// ุงูุจุญุซ ุนู ููุงู ุฅุฑุณุงู init_ack
const initAckPattern = /ws\.send\(JSON\.stringify\(\{ type: 'status', message: 'Ready for audio input' \}\)\);/;

if (initAckPattern.test(serverContent)) {
    console.log('โ ูุฌุฏุช ููุงู ุฅุฑุณุงู ุฑุณุงูุฉ Ready');
    
    // ุฅุถุงูุฉ init_ack ูุจู ุฑุณุงูุฉ Ready
    const replacement = `ws.send(JSON.stringify({ type: 'init_ack', message: 'Initialization successful' }));
                  ws.send(JSON.stringify({ type: 'status', message: 'Ready for audio input' }));`;
    
    serverContent = serverContent.replace(initAckPattern, replacement);
    
    console.log('๐ง ุฅุถุงูุฉ init_ack message...');
} else {
    console.log('โ ูู ุฃุฌุฏ ููุงู ุฅุฑุณุงู ุฑุณุงูุฉ Ready');
}

// ุงูุจุญุซ ุนู ููุงู ุขุฎุฑ ูุฅุฑุณุงู init_ack
const sessionStartedPattern = /recognizer\.sessionStarted = \(s, e\) => \{[\s\S]*?ws\.send\(JSON\.stringify\(\{ type: 'status', message: 'Recognition session started' \}\)\);/;

if (sessionStartedPattern.test(serverContent)) {
    console.log('โ ูุฌุฏุช ููุงู sessionStarted');
    
    // ุฅุถุงูุฉ init_ack ูู sessionStarted
    const replacement = `recognizer.sessionStarted = (s, e) => {
                console.log(\`๐ [\${language}] Session started:\`, {
                  sessionId: e.sessionId,
                  timestamp: new Date().toISOString()
                });
                ws.send(JSON.stringify({ type: 'init_ack', message: 'Initialization successful' }));
                ws.send(JSON.stringify({ type: 'status', message: 'Recognition session started' }));`;
    
    serverContent = serverContent.replace(sessionStartedPattern, replacement);
    
    console.log('๐ง ุฅุถุงูุฉ init_ack ูู sessionStarted...');
}

// ุงูุจุญุซ ุนู ููุงู ุขุฎุฑ ูุฅุฑุณุงู init_ack ูู startContinuousRecognitionAsync
const startRecognitionPattern = /recognizer\.startContinuousRecognitionAsync\([\s\S]*?\(\) => \{[\s\S]*?console\.log\(\`โ \[.*?\] Continuous recognition started successfully\`\);/;

if (startRecognitionPattern.test(serverContent)) {
    console.log('โ ูุฌุฏุช ููุงู startContinuousRecognitionAsync');
    
    // ุฅุถุงูุฉ init_ack ูู startContinuousRecognitionAsync
    const replacement = `recognizer.startContinuousRecognitionAsync(
                () => {
                  console.log(\`โ [\${language}] Continuous recognition started successfully\`);
                  // initialized is already true from above
                  ws.send(JSON.stringify({ type: 'init_ack', message: 'Initialization successful' }));
                  ws.send(JSON.stringify({ type: 'status', message: 'Ready for audio input' }));`;
    
    serverContent = serverContent.replace(startRecognitionPattern, replacement);
    
    console.log('๐ง ุฅุถุงูุฉ init_ack ูู startContinuousRecognitionAsync...');
}

// ุญูุธ ุงูููู ุงููุนุฏู
fs.writeFileSync(serverPath, serverContent, 'utf8');

console.log('โ ุชู ุญูุธ ุงูุชุนุฏููุงุช ูู server.js');
console.log('๐ ูุฑุฌู ุฅุนุงุฏุฉ ุชุดุบูู ุงูุณูุฑูุฑ ุนูู Render');
console.log('๐ ุงูุชุนุฏููุงุช ุงููุถุงูุฉ:');
console.log('   - ุฅุถุงูุฉ init_ack message ุนูุฏ ุจุฏุก ุงูุชุนุฑู');
console.log('   - ุฅุถุงูุฉ init_ack message ูู sessionStarted');
console.log('   - ุฅุถุงูุฉ init_ack message ูู startContinuousRecognitionAsync');

// ุฅูุดุงุก ููู ุงุฎุชุจุงุฑ ุณุฑูุน
const testScript = `
const WebSocket = require('ws');

async function testInitResponse() {
    console.log('๐งช ุงุฎุชุจุงุฑ ุงุณุชุฌุงุจุฉ init ุจุนุฏ ุงูุฅุตูุงุญ...');
    
    const ws = new WebSocket('wss://ai-voicesum.onrender.com/ws');
    
    return new Promise((resolve) => {
        const timeout = setTimeout(() => {
            console.log('โฐ ุงุฎุชุจุงุฑ timeout');
            ws.close();
            resolve(false);
        }, 10000);
        
        ws.onopen = () => {
            console.log('โ WebSocket connected');
            
            setTimeout(() => {
                const initMessage = {
                    type: 'init',
                    language: 'ar-SA',
                    autoDetection: false,
                    realTime: true
                };
                
                console.log('๐ค Sending init message:', initMessage);
                ws.send(JSON.stringify(initMessage));
            }, 1000);
        };
        
        ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                console.log('๐ฅ Received:', message);
                
                if (message.type === 'init_ack') {
                    console.log('โ SUCCESS: Received init_ack!');
                    clearTimeout(timeout);
                    ws.close();
                    resolve(true);
                }
            } catch (error) {
                console.log('๐ฅ Raw message:', event.data);
            }
        };
        
        ws.onerror = (error) => {
            console.log('โ WebSocket error:', error.message);
            clearTimeout(timeout);
            resolve(false);
        };
        
        ws.onclose = () => {
            console.log('๐ WebSocket closed');
            clearTimeout(timeout);
            resolve(false);
        };
    });
}

testInitResponse().then(success => {
    if (success) {
        console.log('๐ ุงูุฅุตูุงุญ ูุฌุญ! ุงูุณูุฑูุฑ ูุณุชุฌูุจ ูุฑุณุงุฆู init');
    } else {
        console.log('โ ุงูุฅุตูุงุญ ูู ููุฌุญ ุจุนุฏ. ุชุญูู ูู ุณุฌูุงุช Render');
    }
});
`;

fs.writeFileSync('test-init-fix.js', testScript);
console.log('๐ ุชู ุฅูุดุงุก test-init-fix.js ูุงุฎุชุจุงุฑ ุงูุฅุตูุงุญ');
console.log('๐ก ูุชุดุบูู ุงูุงุฎุชุจุงุฑ: node test-init-fix.js'); 